parameters:
   from_email: "%mailer_user%"
   from_name: "EKO"

services:
   # default configuration for services in *this* file
   _defaults:
       # automatically injects dependencies in your services
       autowire: true
       # automatically registers your services as commands, event subscribers, etc.
       autoconfigure: true
       # this means you cannot fetch services directly from the container via $container->get()
       # if you need to do this, you can override this setting on individual services
       public: false

   # makes classes in src/AppBundle available to be used as services
   # this creates a service per class whose id is the fully-qualified class name
   AppBundle\:
       resource: '../../src/AppBundle/*'
       # you can exclude directories or files
       # but if a service is unused, it's removed anyway
       exclude: '../../src/AppBundle/{Entity,Repository,Tests,DTO}'

   # controllers are imported separately to make sure they're public
   # and have a tag that allows actions to type-hint services
   AppBundle\Action\:
       resource: '../../src/AppBundle/Action'
       public: true
       tags: ['controller.service_arguments']

   # add more services, or override services that need manual wiring
   # AppBundle\Service\ExampleService:
   #     arguments:
   #         $someArgument: 'some_value'

   AppBundle\Mailer\Mailer:
       arguments: ["@mailer", "%from_email%", "%from_name%", "@templating", "%mail_admin%"]
       public: true


    AppBundle\Search\SearchEngine:
        arguments: ["@doctrine.orm.entity_manager"]

    AppBundle\Menu\Builder:
        arguments: ["@knp_menu.factory", "@security.authorization_checker"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main }
            - { name: knp_menu.menu_builder, method: createCustomerMenu, alias: customer }
            - { name: knp_menu.menu_builder, method: createCabinetMenu, alias: cabinet }

